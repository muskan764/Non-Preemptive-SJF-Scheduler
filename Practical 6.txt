# Function to calculate waiting time for non-preemptive SJF
def calculate_waiting_time_non_preemptive(processes, n, burst_time, arrival_time, waiting_time):
    remaining_processes = sorted(zip(arrival_time, burst_time, processes))
    elapsed_time = 0
    
    for i in range(n):
        arrival, burst, pid = min((arrival, burst, pid) for arrival, burst, pid in remaining_processes if arrival <= elapsed_time)
        remaining_processes.remove((arrival, burst, pid))
        waiting_time[pid] = max(0, elapsed_time - arrival)
        elapsed_time += burst

# Function to calculate turnaround time
def calculate_turnaround_time(n, burst_time, waiting_time, turnaround_time):
    for i in range(n):
        turnaround_time[i] = burst_time[i] + waiting_time[i]

# Function to find average waiting and turnaround time for non-preemptive SJF
def find_avg_time_non_preemptive(processes, n, arrival_time, burst_time):
    waiting_time = [0] * n
    turnaround_time = [0] * n

    calculate_waiting_time_non_preemptive(processes, n, burst_time, arrival_time, waiting_time)
    calculate_turnaround_time(n, burst_time, waiting_time, turnaround_time)

    # Display process information
    print("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time")
    total_waiting_time = 0
    total_turnaround_time = 0
    for i in range(n):
        total_waiting_time += waiting_time[i]
        total_turnaround_time += turnaround_time[i]
        print(f"{processes[i]}\t\t{arrival_time[i]}\t\t{burst_time[i]}\t\t{waiting_time[i]}\t\t{turnaround_time[i]}")

    print(f"\nAverage Waiting Time: {total_waiting_time / n:.2f}")
    print(f"Average Turnaround Time: {total_turnaround_time / n:.2f}")

# Input: List of process IDs, arrival times, and burst times
processes = [0, 1, 2, 3]
arrival_time = [0, 2, 4, 5]  # Arrival time for each process
burst_time = [7, 4, 1, 4]    # Burst time for each process
n = len(processes)

find_avg_time_non_preemptive(processes, n, arrival_time, burst_time)
